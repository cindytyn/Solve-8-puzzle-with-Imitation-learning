# -*- coding: utf-8 -*-
"""cmpt417_model_svm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y2-gVq4Rv-h1019h-fNjbuBCOAFuf19x
"""

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/MyDrive/Courses/CMPT 417/Final Project/s3_train3_csv.csv")
df = df.iloc[:,1:]
df.head()

df_test = pd.read_csv("/content/drive/MyDrive/Courses/CMPT 417/Final Project/s3_test2_csv.csv")
df_test = df_test.iloc[:,1:]
df_test.head()

pList = []
cList = []
pList.append(df['previous_state'])
cList.append(df['current_state'])

pList_test = []
cList_test = []
pList_test.append(df_test['previous_state'])
cList_test.append(df_test['current_state'])

def flatten_list(configList):
  flatten_list = []
  for x in configList:
    for y in x: #this gets [[0, 1, 3], [7, 8, 2], [5, 4, 6]] [[0, 1, 3], [7, 8, 2], [5, 4, 6]]
      nested_list = []
      for s in y: #this gets every element as a string
        if s.isdigit():
          nested_list.append(int(s))
      flatten_list.append(nested_list)
  print(flatten_list)
  return flatten_list

X = flatten_list(pList)
Y = flatten_list(cList)

X_test = flatten_list(pList_test)
Y_test = flatten_list(cList_test)

x = pd.DataFrame(X)
x_test = pd.DataFrame(X_test)

y = np.array(Y)
y_test = np.array(Y_test)

from sklearn.multioutput import MultiOutputClassifier
from sklearn.svm import SVC

svm_model = SVC(kernel='rbf', gamma='auto')

classifier = MultiOutputClassifier(svm_model, n_jobs=-1)

# Train the model on the input data
classifier.fit(x, y)

classifier.score(x_test,y_test)

svm_model = SVC(kernel='linear', gamma='auto', C=0.1)

classifier = MultiOutputClassifier(svm_model, n_jobs=-1)

# Train the model on the input data
classifier.fit(x, y)

classifier.score(x_test,y_test)

svm_model = SVC(kernel='rbf', gamma='auto', C=10)

classifier = MultiOutputClassifier(svm_model, n_jobs=-1)

# Train the model on the input data
classifier.fit(x, y)

classifier.score(x_test,y_test)

svm_model = SVC(kernel='rbf', gamma='auto', C=100)

classifier = MultiOutputClassifier(svm_model, n_jobs=-1)

# Train the model on the input data
classifier.fit(x, y)

classifier.score(x_test,y_test)

# #Intializing svm classifier
# svm_model = SVC()

# #Initiliazig k-fold cv
# cv2 = KFold(n_splits=5, shuffle=True,random_state=419)

# #Creating a parameter dictionary for hyperparemeter tuning
# param_dic = {  
#     'kernel' : ['linear', 'poly', 'rbf', 'sigmoid'],
#     'gamma' : ['scale', 'auto'], 
#     'C' : [0.1,1,10, 25, 50,100,1000],
#     'degree' : [1,2,3,4,5,6]    
#     }

# #Creating a scorer dictionary for models to be evaluated based on the chosed metrics
# scorers = {
#     'f1_weighted' : make_scorer(f1_score, average='weighted'),
#     'precision_weighted': make_scorer(precision_score, average='weighted'),
#     'recall_weighted': make_scorer(recall_score , average='weighted'),
#     'accuracy': make_scorer(accuracy_score)
#     }

# #Initializing GridSearchCV
# svm_clf = GridSearchCV(svm_model, 
#                     param_grid = param_dic,
#                     scoring = scorers, 
#                     n_jobs = -1, 
#                     cv = cv2.split(xTrain,yTrain),
#                     refit = 'accuracy')

# #Fiting the classfier to the training data
# svm_clf.fit(xTrain,yTrain)